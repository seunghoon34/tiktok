// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DIRECT_URL")
  extensions = [uuidOssp(map: "uuid-ossp")]
}

model User {
  id         String     @id @unique
  email      String     @unique
  username       String?    @unique
  created_at DateTime   @default(now())
  videos     Video[]
  likes      Like[]
  matchesAsUser1 Match[] @relation("UserOneMatches")
  matchesAsUser2 Match[] @relation("UserTwoMatches")
  comments   Comment[]
  chats      Chat[]
  expo_push_token String?
  notifications Notification[]
}

model Video {
  id         String    @id @default(dbgenerated("uuid_generate_v4()"))
  title      String
  uri        String
  user_id    String
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  likes      Like[]
  created_at DateTime  @default(now())
  comments   Comment[]
}

model Like {
  id            String   @id @default(dbgenerated("uuid_generate_v4()"))
  user_id       String
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  video_id      String
  video         Video    @relation(fields: [video_id], references: [id], onDelete: Cascade)
  video_user_id String
  created_at    DateTime @default(now())
}

model Match {
  id String @id @default(dbgenerated("uuid_generate_v4()"))
  user1_id String
  user2_id String
  user1 User @relation("UserOneMatches", fields: [user1_id], references: [id], onDelete: Cascade)
  user2 User @relation("UserTwoMatches", fields: [user2_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())

  @@unique([user1_id, user2_id])
}

model Comment {
  id            String   @id @default(dbgenerated("uuid_generate_v4()"))
  user_id       String
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  video_id      String
  video         Video    @relation(fields: [video_id], references: [id], onDelete: Cascade)
  video_user_id String
  text          String
  created_at    DateTime @default(now())
}

model Chat {
  id           String   @id @default(dbgenerated("uuid_generate_v4()"))
  user_id      String
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  chat_user_id String
  users_key    String
  text         String
  created_at   DateTime @default(now())
}

model Notification {
  id String @id @default(dbgenerated("uuid_generate_v4()"))
  user_id String
  message String
  read Boolean @default(false)
  created_at DateTime @default(now())
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
